
import java.util.*;
import java.io.*;

public class Main {
	static int n;
	static int sharksize = 2;
	static int eat = 0;
	static int[] tar= {0,0,2,5,9,14,20,27,35,44,54,65,77,90,104,};
	static int target =2;
	static int time = 0;
	static int[][] map;
	static boolean[][] visited;
	static int starti,startj;
	
	static int[] di = {-1,0,0,1};
	static int[] dj = {0,-1,1,0};
	
	static int bfs(int i,int j) {
		int count =0;
		PriorityQueue<int[]> que = new PriorityQueue<int[]>(new Comparator<int[]>() {

			@Override
			public int compare(int[] o1, int[] o2) {
				// TODO Auto-generated method stub
				return o1[2]==o2[2] ? o1[0]==o2[0] ? Integer.compare(o1[1], o2[1]) : Integer.compare(o1[0], o2[0]):Integer.compare(o1[2], o2[2]);
			}
		});
		visited[i][j] = true;
		que.offer(new int[] {i,j,0});
		boolean find = false;
		label : while(!que.isEmpty()) {
			int qsize = que.size();
//			for(int[] a : que)System.out.println(Arrays.toString(a));
//			System.out.println("----------");
			
				int[] ar = new int[3];
				ar = que.poll();
				//System.out.println(ar[0] + " "+ar[1]);
				if(map[ar[0]][ar[1]]!=0 && map[ar[0]][ar[1]] < sharksize) {
					find = true;
					eat++;
					
						if(eat == target) {
							sharksize++;
							target+=sharksize;
						}
					map[ar[0]][ar[1]] = 0;
					starti = ar[0];
					startj = ar[1];
					count = ar[2];
					break label;
				}
				
				for(int s =0;s<4;s++) {
					int ni = ar[0] + di[s];
					int nj = ar[1] + dj[s];
					if(ni>=0 && ni<n && nj>=0 && nj<n && !visited[ni][nj]) {
						if(map[ni][nj] <= sharksize) {
							que.offer(new int[] {ni,nj,ar[2]+1});
							visited[ni][nj] = true;
							//System.out.println("찾았"+ " "+ni + " "+nj);
						}
						
//						if(map[ni][nj]!=0 && map[ni][nj] < sharksize) {
//							find = true;
//							eat++;
//							
//								if(eat == tar[sharksize])sharksize++;
//							
//							
//							visited[ni][nj] = true;
//							map[ni][nj] = 0;
//							starti = ni;
//							startj = nj;
//							count = ar[2]+1;
//							break label;
//						}else if(map[ni][nj] == 0 || map[ni][nj]==sharksize) {
//							que.offer(new int[] {ni,nj,ar[2]+1});
//							visited[ni][nj] = true;
//							//System.out.println("찾았"+ " "+ni + " "+nj);
//						}
					}
				}
			
			
		}
		return find ? count : 0;
	}
	
	
	
	public static void main(String[] args) throws Exception{
	
		BufferedReader br =new BufferedReader(new InputStreamReader(System.in));
		n = Integer.parseInt(br.readLine());
		map = new int[n][n];
		visited = new boolean[n][n];
//		que = new PriorityQueue<int[]>(new Comparator<int[]>() {
//
//			@Override
//			public int compare(int[] o1, int[] o2) {
//				return o1[0]-o2[0];
//			}
//		});
		for(int i =0;i<n;i++) {
			StringTokenizer st = new StringTokenizer(br.readLine()," ");
			for(int j = 0;j<n;j++) {
				map[i][j] = Integer.parseInt(st.nextToken());
				if(map[i][j]==9) {
					map[i][j] = 0;
					starti = i;
					startj = j;
				}
			}
		}
		int sum = 0;
		while(true) {
		//System.out.println(sharksize);
//			for(int[] a: map)System.out.println(Arrays.toString(a));
//			System.out.println(sum +"s" + "/ lv :" + sharksize + " exp:"+eat + "/" +tar[sharksize]);
//			System.out.println();
			visited = new boolean[n][n];
			
			int add = bfs(starti,startj);
//			System.out.println(add);
			sum+= add;
			if(add ==0) break;
		}
		System.out.println(sum);
	}

}
